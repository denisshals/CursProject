{"version":3,"sources":["App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","useDeviceLanguage","firestore","SignIn","useState","phone","setPhone","className","onClick","provider","GoogleAuthProvider","signInWithPopup","src","alt","id","placeholder","type","value","onChange","e","target","captcha","RecaptchaVerifier","size","signInWithPhoneNumber","then","code","prompt","confirm","result","console","log","user","document","querySelector","textContent","catch","error","SignOut","currentUser","signOut","ChatRoom","formValue","setFormValue","dummy","useRef","messagesRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","sendMessage","preventDefault","uid","photoURL","avatarPhoto","add","text","createdAt","FieldValue","serverTimestamp","useEffect","current","scrollIntoView","behavior","map","message","ref","onSubmit","disabled","ChatMessage","messageClass","App","useAuthState","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.602b9d24.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n// хуки из node-пакета firebase\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\n\n\n// конфигурация профиля приложения в firebase\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAojgkXmozM_HnCLV0hq1_BRZBO0HYpq-M\",\n  authDomain: \"chat-ae62a.firebaseapp.com\",\n  projectId: \"chat-ae62a\",\n  storageBucket: \"chat-ae62a.appspot.com\",\n  messagingSenderId: \"58043589802\",\n  appId: \"1:58043589802:web:627be3274f7e5b676c5cd3\"\n})\n\nfirebase.auth().useDeviceLanguage();\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  //проверка в сервисе авторизации авторизован ли пользователь\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header >\n        <h1>Web Chat</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {/* условный рендеринг в зависимости от того, авторизован ли пользователь */}\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const [phone, setPhone] = useState(\"\");\n\n const signInWithPhone = () => {\n   //Делаем каптчу невидимой для тестового проекта(!). Чтобы ускорить работу. Так как это необходимый элемент метода смс-подтверждения в firebase\n  const captcha = new firebase.auth.RecaptchaVerifier(\"recaptcha-container\", {\n    size: \"invisible\",\n  });\n  //Сам метод смс-авторизации. Код адаптирован отсюда https://firebase.google.com/docs/auth/web/phone-auth\n  auth.signInWithPhoneNumber(phone, captcha)\n    .then((e) => {\n      const code = prompt(\"Введіть код з СМС\", \"\");\n      if (code === null) return;\n//регистрируем код из смс\n      e.confirm(code)\n        .then((result) => {\n          console.log(result.user);\n\n          document.querySelector(\"label\").textContent += result.user.phone + \"Номер підтверджено\";\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n }\n  \n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    //Метод авторизации с помощью гугл аккаунта\n    auth.signInWithPopup(provider);\n  }\n  return (\n    <>\n      <div className=\"google-box\">\n      <div className=\"google-btn\" onClick={signInWithGoogle}>\n          <div className=\"google-icon-wrapper\" >\n            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"logo\"/>\n          </div>\n        <div className=\"btn-text\"><b>Увійти за допомогою Google</b></div>\n      </div>\n      <br />\n      <div className=\"container\">\n        <div id=\"recaptcha-container\" />\n      </div>\n      </div>\n      <div className=\"flex-box\">\n      <input\n        className=\"phone-holder\"\n        placeholder=\"Введіть номер телефону\"\n        type=\"phone\"\n        value={phone}\n        onChange={(e) => {\n          setPhone(e.target.value);\n        }}\n      />\n      <button id=\"phone\" type=\"button\" onClick={signInWithPhone}>\n        Увійти за допомогою СМС\n      </button>\n      <label></label>\n      </div>\n    </>\n    \n  )\n\n}\n//Функция выхода. Использует метод сервиса auth - signOut. Проверяет существует ли залогиненый юзер\nconst SignOut = () => {\n  return (\n    auth.currentUser && (\n      <button type=\"button\" onClick={() => auth.signOut()}>\n        Вихід\n      </button>\n    )\n  );\n};\n\nfunction ChatRoom() {\n\n  //Стейт для временного хранения введенного текста перед отправкой его на сервер.\n  const [formValue, setFormValue] = useState(\"\");\n\n  const dummy = useRef();//привязка к пустому спану, чтобы можно было управлять автоматической прокруткой\n\n  const messagesRef = firestore.collection(\"messages\"); //Подвязывание коллекции 'messages' в БД firestore\n  const query = messagesRef.orderBy(\"createdAt\").limitToLast(25); \n\n  const [messages] = useCollectionData(query, { idField: \"id\" }); //Хук прослушивает изменения в коллекции 'messages'. Возвращает массив с объектами, где каждый объект это сообщение.\n\n  //Обработчик сабмита. Отправляет введенный в форме текст на сервер.\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const { uid, photoURL } = auth.currentUser;\n\n    //прикрепляем изображение пользователя в зависимости от того, как он залогинился\n    //Если через гугл-аккаунт, то аватарка берется из него, если через смс - то дефолтная картинка\n    const avatarPhoto = photoURL ? photoURL : \"https://bit.ly/348yGrm\"\n\n    //метод добавления новой записи в БД\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),//Добавляем тайм-стамп к каждому сообщению как уникальный айдишник\n      uid,\n      avatarPhoto,\n    });\n\n    setFormValue(\"\");//очищение формы после отправки сообщения\n  };\n\n  //хук для автоматической прокрутки чата к последнему сообщению.\n  useEffect(() => {\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (<>\n    <div className=\"text-field\">\n      {messages &&\n        messages.map((message) => (\n          <ChatMessage key={message.id} message={message} />\n        ))}\n      </div>\n      <div className=\"send-form\">\n      <span ref={dummy} />\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n          placeholder=\"Напишіть що-небудь\"\n        />\n        <button type=\"submit\" disabled={!formValue}>\n        📤\n        </button>\n      </form>\n      </div>\n    \n\n  </>)\n}\n\n\n\nconst ChatMessage = ({ message }) => {\n  const { text, uid, avatarPhoto } = message;\n//условный выбор названия css-класса в зависимости от того ваше сообщение или других участников. Чисто для стилизации.\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n//рендер самого сообщения. Объект сообщения берется из пропсов. \n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={avatarPhoto} alt=\"avatar\"/>\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}